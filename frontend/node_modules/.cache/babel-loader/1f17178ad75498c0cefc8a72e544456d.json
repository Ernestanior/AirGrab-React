{"ast":null,"code":"//axios封装\nimport axios from 'axios';\n\nconst request = option => {\n  return new Promise((resolve, reject) => {\n    const instance = axios.create({\n      // baseURL: 'http://155.94.144.151:47734',\n      baseURL: 'http://23.224.99.234:36536',\n      timeout: 10000\n    }); //axios拦截器\n    //请求拦截\n    //1. 比如config中一些信息不符合服务器要求，可以拦截后修改信息再发送\n    //2. 比如每次发送网络请求时，希望在界面中显示等待请求的图标\n    //3. 某些请求需要携带一些特殊信息，比如登录token，可以拦截后验证是否有该信息，没有的话直接跳转登录页面让用户登录\n\n    instance.interceptors.request.use(config => {\n      // console.log('请求拦截：')\n      // console.log(config);\n      return config;\n    }, err => {\n      console.log(err);\n    }); //响应拦截\n    //可以对服务器返回的数据进行加工，比如只取出我们需要的data数据，丢弃其他没用的数据\n\n    instance.interceptors.response.use(config => {\n      // console.log('响应拦截：')\n      // console.log(config)\n      return config; // return config\n    }, err => {\n      console.log(err);\n    });\n    instance(option).then(res => {\n      // console.log('最终返回数据：');\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\n\nexport default request;","map":{"version":3,"sources":["C:/Users/17127/Desktop/IT/AirGrab - React/frontend/src/network/request.js"],"names":["axios","request","option","Promise","resolve","reject","instance","create","baseURL","timeout","interceptors","use","config","err","console","log","response","then","res","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAC1B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC5B;AACAC,MAAAA,OAAO,EAAE,4BAFmB;AAG5BC,MAAAA,OAAO,EAAE;AAHmB,KAAb,CAAjB,CADsC,CAMtC;AACA;AACA;AACA;AACA;;AACAH,IAAAA,QAAQ,CAACI,YAAT,CAAsBT,OAAtB,CAA8BU,GAA9B,CAAkCC,MAAM,IAAI;AAC1C;AACA;AACA,aAAOA,MAAP;AACD,KAJD,EAIGC,GAAG,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAND,EAXsC,CAkBtC;AACA;;AACAP,IAAAA,QAAQ,CAACI,YAAT,CAAsBM,QAAtB,CAA+BL,GAA/B,CAAmCC,MAAM,IAAI;AAC3C;AACA;AACA,aAAOA,MAAP,CAH2C,CAI3C;AACD,KALD,EAKGC,GAAG,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPD;AAQAP,IAAAA,QAAQ,CAACJ,MAAD,CAAR,CAAiBe,IAAjB,CAAuBC,GAAD,IAAS;AAC7B;AACAd,MAAAA,OAAO,CAACc,GAAD,CAAP;AACD,KAHD,EAGGC,KAHH,CAGUN,GAAD,IAAS;AAChBR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,KALD;AAMD,GAlCM,CAAP;AAmCD,CApCD;;AAsCA,eAAeZ,OAAf","sourcesContent":["//axios封装\r\nimport axios from 'axios'\r\n\r\nconst request = (option) => {\r\n  return new Promise((resolve, reject) => {\r\n    const instance = axios.create({\r\n      // baseURL: 'http://155.94.144.151:47734',\r\n      baseURL: 'http://23.224.99.234:36536',\r\n      timeout: 10000\r\n    })\r\n    //axios拦截器\r\n    //请求拦截\r\n    //1. 比如config中一些信息不符合服务器要求，可以拦截后修改信息再发送\r\n    //2. 比如每次发送网络请求时，希望在界面中显示等待请求的图标\r\n    //3. 某些请求需要携带一些特殊信息，比如登录token，可以拦截后验证是否有该信息，没有的话直接跳转登录页面让用户登录\r\n    instance.interceptors.request.use(config => {\r\n      // console.log('请求拦截：')\r\n      // console.log(config);\r\n      return config\r\n    }, err => {\r\n      console.log(err);\r\n    })\r\n    //响应拦截\r\n    //可以对服务器返回的数据进行加工，比如只取出我们需要的data数据，丢弃其他没用的数据\r\n    instance.interceptors.response.use(config => {\r\n      // console.log('响应拦截：')\r\n      // console.log(config)\r\n      return config\r\n      // return config\r\n    }, err => {\r\n      console.log(err);\r\n    })\r\n    instance(option).then((res) => {\r\n      // console.log('最终返回数据：');\r\n      resolve(res)\r\n    }).catch((err) => {\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n\r\nexport default request"]},"metadata":{},"sourceType":"module"}